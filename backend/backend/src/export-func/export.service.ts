import { Injectable } from '@nestjs/common';
import * as PDFDocument from 'pdfkit';

const PptxGenJS = require('pptxgenjs');

export interface ExportSlideData {
  title: string;
  content: string;
  type: 'title' | 'content' | 'image' | 'chart';
  notes?: string;
  imageSuggestions?: {
    type: string;
    description: string;
    searchTerms: string[];
    altText: string;
    style?: string;
  }[];
}

export interface ExportDeckData {
  title: string;
  description?: string;
  slides: ExportSlideData[];
  companyName?: string;
  createdAt?: Date;
}

export interface ExportOptions {
  includeNotes: boolean;
  template: 'professional' | 'modern' | 'minimal';
  watermark?: string;
}


@Injectable()
export class ExportService {
  
  /**
   * Generate PDF from deck data
   */
  async generatePDF(deckData: ExportDeckData, options: ExportOptions = { 
    includeNotes: true, 
    template: 'professional' 
  }): Promise<Buffer> {
        
    return new Promise((resolve, reject) => {
      try {
        const doc = new PDFDocument({
          size: 'A4',
          margins: { top: 50, bottom: 50, left: 50, right: 50 }
        });
        
        const buffers: Buffer[] = [];
        
        doc.on('data', (chunk) => buffers.push(chunk));
        doc.on('end', () => {
          const pdfBuffer = Buffer.concat(buffers);
                    resolve(pdfBuffer);
        });
        doc.on('error', reject);

        // Title page
        this.addPDFTitlePage(doc, deckData, options);

        // Ensure title page and first slide are on separate pages
        doc.addPage();

        // Add slides
        deckData.slides.forEach((slide, index) => {
          if (index > 0) doc.addPage();
          this.addPDFSlide(doc, slide, index + 1, options);
        });
        
        // Add speaker notes section if requested
        if (options.includeNotes && deckData.slides.some(s => s.notes)) {
          doc.addPage();
          this.addPDFSpeakerNotes(doc, deckData.slides, options);
        }
        
        doc.end();
        
      } catch (error) {
                reject(error);
      }
    });
  }

  /**
   * Generate PowerPoint using PptxGenJS (more reliable)
   */
  async generatePowerPoint(deckData: ExportDeckData, options: ExportOptions = { 
    includeNotes: true, 
    template: 'professional' 
  }): Promise<Buffer> {
        
    try {
      const pptx = new PptxGenJS();
      
      // Set document properties
      pptx.title = deckData.title;
      pptx.subject = 'Pitch Deck Presentation';
      pptx.author = deckData.companyName || 'Pitch Deck Generator';
      
      // Add slides
      deckData.slides.forEach((slideData, index) => {
                this.addPptxGenSlide(pptx, slideData, index, options);
      });
      
      // Generate buffer
      const buffer = await pptx.write('nodebuffer') as Buffer;
            
      return buffer;
      
    } catch (error) {
            throw new Error(`PowerPoint generation failed: ${error.message}`);
    }
  }

  // ========== PDF HELPERS ==========

  private addPDFTitlePage(doc: any, deckData: ExportDeckData, options: ExportOptions): void {
    const { template } = options;
    
    // Header
    doc.fontSize(28)
       .fillColor(template === 'professional' ? '#1a365d' : '#2563eb')
       .text(deckData.title, { align: 'center' });
    
    doc.moveDown(1);
    
    if (deckData.description) {
      doc.fontSize(14)
         .fillColor('#4a5568')
         .text(deckData.description, { align: 'center' });
    }
    
    doc.moveDown(2);
    
    if (deckData.companyName) {
      doc.fontSize(16)
         .fillColor('#2d3748')
         .text(`Presented by: ${deckData.companyName}`, { align: 'center' });
    }
    
    // Date
    doc.moveDown(1);
    doc.fontSize(12)
       .fillColor('#718096')
       .text(`Generated on: ${new Date().toLocaleDateString()}`, { align: 'center' });
    
    // Footer
    doc.fontSize(10)
       .fillColor('#a0aec0')
       .text('Generated by AI Pitch Deck Platform', 50, doc.page.height - 100, { align: 'center' });
  }

  private addPDFSlide(doc: any, slide: ExportSlideData, slideNumber: number, options: ExportOptions): void {
    const { template } = options;
    const titleColor = template === 'professional' ? '#1a365d' : '#2563eb';
    
    // Slide number
    doc.fontSize(10)
       .fillColor('#a0aec0')
       .text(`Slide ${slideNumber}`, doc.page.width - 100, 30);
    
    // Title
    doc.fontSize(20)
       .fillColor(titleColor)
       .text(slide.title, 50, 80, { width: doc.page.width - 100 });
    
    doc.moveDown(1);
    
    // Content
    const contentLines = slide.content.split('\n').filter(line => line.trim());
    
    contentLines.forEach(line => {
      const trimmedLine = line.trim();
      
      if (trimmedLine.startsWith('•') || trimmedLine.startsWith('-')) {
        // Bullet point
        doc.fontSize(12)
           .fillColor('#2d3748')
           .text(`  ${trimmedLine}`, { width: doc.page.width - 120, indent: 20 });
      } else if (trimmedLine.length > 0) {
        // Regular paragraph
        doc.fontSize(12)
           .fillColor('#2d3748')
           .text(trimmedLine, { width: doc.page.width - 100 });
      }
      
      doc.moveDown(0.5);
    });
    
    // Image suggestions placeholder
    if (slide.imageSuggestions && slide.imageSuggestions.length > 0) {
      doc.moveDown(1);
      doc.fontSize(10)
         .fillColor('#718096')
         .text('Image Suggestions:', { continued: false });
      
      slide.imageSuggestions.slice(0, 2).forEach(img => {
        doc.fontSize(9)
           .fillColor('#a0aec0')
           .text(`• ${img.description}`, { width: doc.page.width - 100 });
      });
    }
    
    // Speaker notes on same page if short
    if (slide.notes && slide.notes.length < 200) {
      doc.moveDown(2);
      doc.fontSize(10)
         .fillColor('#4a5568')
         .text('Speaker Notes:', { continued: false });
      doc.fontSize(9)
         .fillColor('#718096')
         .text(slide.notes, { width: doc.page.width - 100 });
    }
  }

  private addPDFSpeakerNotes(doc: any, slides: ExportSlideData[], options: ExportOptions): void {
    doc.fontSize(18)
       .fillColor('#1a365d')
       .text('Speaker Notes', { align: 'center' });
    
    doc.moveDown(2);
    
    slides.forEach((slide, index) => {
      if (slide.notes && slide.notes.trim()) {
        doc.fontSize(14)
           .fillColor('#2d3748')
           .text(`${index + 1}. ${slide.title}`, { continued: false });
        
        doc.moveDown(0.5);
        
        doc.fontSize(11)
           .fillColor('#4a5568')
           .text(slide.notes, { width: doc.page.width - 100 });
        
        doc.moveDown(1.5);
      }
    });
  }

  // ========== PPTXGENJS HELPERS ==========

  private addPptxGenSlide(pptx: any, slide: ExportSlideData, index: number, options: ExportOptions): void {
    try {
            
      const slideObj = pptx.addSlide();
      
      // Add title with reduced height and top margin
      slideObj.addText(slide.title || 'Untitled Slide', {
        x: 0.5,
        y: 0.3, // Reduce Y to move title slightly up
        w: 9,
        h: 0.6, // Reduce height from 1 to 0.6
        fontSize: 20,
        fontFace: 'Times New Roman',
        color: options.template === 'professional' ? '1a365d' : '2563eb',
        bold: true,
        lineSpacing: 1
      });
      
      // Add content
      if (slide.content && slide.content.trim()) {
        const contentLines = slide.content.split('\n')
          .filter(line => line.trim())
          .slice(0, 6); // Reduce to make room for image suggestions
      
        let yPos = 1.2;
        const maxY = 5.5;
        
        contentLines.forEach(line => {
          const trimmedLine = line.trim();
          if (trimmedLine && yPos + 0.4 <= maxY) { // Leave space for image suggestions
            slideObj.addText(trimmedLine, {
              x: 0.5,
              y: yPos,
              w: 9,
              h: 0.5,
              fontSize: 12,
              fontFace: 'Times New Roman',
              color: '2d3748',
              lineSpacing: 1
            });
            yPos += 0.6;
          }
        });
      }
      
      //  Add image suggestions as TEXT (not images)
      if (slide.imageSuggestions && slide.imageSuggestions.length > 0) {
        // Add header for image suggestions
        slideObj.addText('Image Suggestions:', {
          x: 0.5,
          y: 5.5,
          w: 9,
          h: 0.4,
          fontSize: 12,
          fontFace: 'Times New Roman',
          color: '4a5568',
          bold: true,
          lineSpacing: 1
        });
        
        let suggestionY = 5.9;
        
        // Add each suggestion as text
        slide.imageSuggestions.slice(0, 2).forEach((suggestion, index) => { // Limit to 2 suggestions
          const suggestionText = `${index + 1}. ${suggestion.description || 'Image suggestion'}`;
          
          slideObj.addText(suggestionText, {
            x: 0.5,
            y: suggestionY,
            w: 9,
            h: 0.3,
            fontSize: 10,
            fontFace: 'Arial',
            color: '718096',
            italic: true,
            lineSpacing: 1
          });
          
          suggestionY += 0.35;
        });
      }
      
      //  Only add speaker notes if they actually exist and are not just generated content
      if (options.includeNotes && slide.notes && slide.notes.trim()) {
        // Check if the notes are just auto-generated (containing slide title/content)
        const isAutoGenerated = slide.notes.includes('Speaker notes for') || 
                               slide.notes.includes('Key points about') ||
                               slide.notes.includes('Remember to emphasize');
        
        if (!isAutoGenerated) {
          try {
            slideObj.addNotes(slide.notes);
                      } catch (notesError) {
                      }
        } else {
                  }
      }
      
            
    } catch (error) {
            
      // Add a simple fallback slide
      try {
        const fallbackSlide = pptx.addSlide();
        fallbackSlide.addText(slide.title || 'Slide', {
          x: 1,
          y: 2,
          w: 8,
          h: 1,
          fontSize: 20,
          fontFace: 'Arial',
          color: '1a365d',
          align: 'center',
          lineSpacing: 1
        });
        fallbackSlide.addText('Content could not be loaded', {
          x: 1,
          y: 3,
          w: 8,
          h: 1,
          fontSize: 14,
          fontFace: 'Arial',
          color: '718096',
          align: 'center',
          lineSpacing: 1
        });
              } catch (fallbackError) {
              }
    }
  }
}